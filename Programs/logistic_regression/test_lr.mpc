NUM_PARTIES = 3
SGD_ITERS = 10
data_sizes = [10, 10, 10]
total_samples = sum(data_sizes)
dim = 10
BATCH_SIZE = 5

sfix.set_precision(32)

X = sfixMatrix(total_samples, dim)
y = sfixMatrix(total_samples, 1)

offset = regint(0)
for i in range(NUM_PARTIES):
    data_size = data_sizes[i]
    total_read = regint(0)
    @for_range(data_size)
    def b(j):
        @for_range(dim)
        def c(k):
            v = sint.get_private_input_from(i)
            X[offset + j][k] = sfix.load_sint(v)
        total_samples_read += 1
    offset += total_samples_read

for i in range(NUM_PARTIES):
    data_size = data_sizes[i]
    total_read = regint(0)
    @for_range(data_size)
    def b(j):
        v = sint.get_private_input_from(i)
        y[offset + j][0] = sfix.load_sint(v)
        total_samples_read += 1
    offset += total_samples_read


w = sfixMatrix(dim, 1)
alpha_B = sfix.load_sint(sint(100))

@for_range(SGD_ITERS)
def f(i):
    batch_low = i * BATCH_SIZE
    batch_high = (i + 1) * BATCH_SIZE
    
    XB = sfixMatrix(BATCH_SIZE, dim)
    yB = sfixMatrix(BATCH_SIZE, 1)

    @for_range()
    def a(i):
        @for_range(DIM)
        def b(d):
            XB[i][d] = X[batch_low + i][d]
        yB[i][0] = y[batch_low + i][0]

    w_ret = matmul(XB, yB)
    w_sigmoid = sigmoid(w_ret)
    w_sub = matsub(w_sigmoid, yB)
    w_1 = matmul(XB, w_sub)
    w_2 = mat_const_mul(alpha_B, w_1)
    w_res = matsub(w, w_1)
    mat_assign(w, w_res)

@for_range(w.rows)
def a(i):
    print_ln("w[%s] = %s", i, w[i][0].reveal())
    
